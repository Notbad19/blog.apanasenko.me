---
layout: post
title: iPad
excerpt: Ни для кого не секрет, что мобильные платформы становятся все популярнее и популярнее. С начала iPhone (мобильные OS были и раньше такие как WM, Symbian и другие, но именно массовость коммуникаторам и смартфонам принесла iPhone OS) со своим революционными новшествами, потом Android, WebOS, RIM, Maemo (MeeGo), Windows Phone 7 и другие начали ориентироваться на массового пользователя.
published: true
categories:
- apple
- ipad
- objective-c
---

Ни для кого не секрет, что мобильные платформы становятся все популярнее и популярнее. С начала iPhone (мобильные OS были и раньше такие как WM, Symbian и другие, но именно массовость коммуникаторам и смартфонам принесла iPhone OS) со своим революционными новшествами, потом Android, WebOS, RIM, Maemo (MeeGo), Windows Phone 7 и другие начали ориентироваться на массового пользователя. По этому каждое новое мобильное устройство вызывает интерес как со стороны пользователей, так и со стороны разработчиков. Оглядываясь на недавнюю историю успеха iPhone и разработчиков приложений для него, можно с уверенностью сказать, что на качественных и интересных приложениях, под новое устройство от Apple, можно и нужно зарабатывать деньги. По этому сегодня хотелось бы рассмотреть процесс разработки под iPad с нуля.

Так же как и под iPhone разработка происходит только на операционной системе Mac OS X 10.6 Snow Leopard (существуют проекты компиляции приложений под альтернативными OS) с помощью официального iPhone SDK 3.2, которое можно скачать пройдя бесплатную (кроме бета версий SDK, они доступны только подписчикам) регистрацию на сайте <a href="https://developer.apple.com/iphone/index.action">Apple</a>. Для полноценной разработки (тестирование на реальном устройстве, показ заказчику/друзьям, отправку в App Store) вам потребуется купить <a href="http://developer.apple.com/programs/iphone/">подписку</a> (минимальная стоимость $99 за год) и стать полноправным разработчиком под iPhone/iPad. iPhone SDK доступно для трех языков Objective-C, C, C++, так же существует поддержка JavaScript через движок мобильного Safari, а после анонса iPhone OS 4.0 была запрещена какая либо кросс компиляция и использование сторонних языков для разработки приложений продаваемых в App Store (но для некоторых проектов были сделаны "исключения", по крайней мере по их же заявлениям "Unity 3D":http://blogs.unity3d.com/2010/05/11/unity-and-the-iphone-os-4-0-update-ii/, "PhoneGap"http://www.phonegap.com/2010/04/14/phonegap-and-the-apple-developer-license-agreement/). Из трех доступных языков для нативных приложений самым "православным" является Objective-C, если вы ранее имели дело с Unmanagement языками, то освоение Objective-C по мануалам от Apple не составит для вас труда, если же вы разрабатывали ранее только на языках со сборщиком мусора я вам советую прочитать какую нибудь книгу по введению в язык.

h2. Objective-C

"Objective-C":http://en.wikipedia.org/wiki/Objective-C - это слаботипизированный, объектно-ориентируемый, компилируемый, native язык. В большинстве книгах, статьях и других материалах по Objective-C, его называют все тем же С с дополнительными возможностями и надстройками, которые не нарушают совместимости (в отличии от С++, он все таки уже другой язык). По этому все правила работающие в С работают и в Objective-C, весь код работает и там и там. При этом у вас в наличии объектно-ориентированная парадигма заимствованная у "Smalltalk":http://en.wikipedia.org/wiki/Smalltalk. В следствие этого одной из особенностей языка является то, что он message-oriented в то время как С++ — function-oriented. Это значит, что в нём вызовы метода интерпретируются не как вызов функции (хотя к этому обычно все сводится), а именно как посылка сообщения (с именем и аргументами) объекту, подобно тому, как это происходит в Smalltalk-е. Такой подход имеет своих почитателей и своих ненавистников, я могу сказать, что к этому привыкаешь и если проникаешься данным подходов, сразу же находятся плюсы. А именно любому объекту можно послать любое сообщение. Объект может вместо обработки сообщения просто переслать его другому объекту для обработки (так называемое делегирование), в частности именно так можно легко реализовать распределенные объекты (то есть объекты находящиеся в различных адресных пространствах и даже на разных компьютерах). Привязка сообщения к соответствующей функции происходит непосредственно на этапе выполнения.
В языке есть нормальная поддержка протоколов (то есть понятие интерфейса объекта и протокола четко разделены). Для объектов поддерживается наследование (не множественное), для протоколов поддерживается множественное наследование. Объект может быть унаследован от другого объекта и сразу нескольких протоколов (хотя это скорее не наследование протокола, а его поддержка).
Так как это расширенный С и в программирование под iPhone/iPad у Objective-C нету GC (под старшего брата iPhone OS, существует GC с версии 10.5+), то и вся ответственность по управлению памятью лежит на программисте. За не большой опыт программирования под iPhone SDK для управления памяти существуют несколько правил:

Управ­ле­ние па­мя­тью в Objective-C ба­зи­ру­ет­ся на прин­ци­пе "вла­де­ния объ­ек­том". "Ос­нов­ные пра­ви­ла управ­ле­ния па­мя­тью":http://developer.apple.com/iPhone/library/documentation/Cocoa/Conceptual/MemoryMgmt/MemoryMgmt.html в Objective-C мож­но за­пи­сать так:

# Для по­лу­че­ния объ­ек­та во вла­де­ние необ­хо­ди­мо вы­звать ме­тод, называющийся "alloc", начинающийся с "new" ли­бо со­дер­жа­щий "copy". На­при­мер, alloc, newObject, mutableCopy;
# Для осво­бож­де­ния объ­ек­та, который был по­лу­чен при по­мо­щи перечисленных вы­ше функций, необ­хо­ди­мо вы­звать функцию "release" ли­бо "autorelease". Во всех остальных случаях осво­бож­де­ние объ­ек­та не требуется;
# Ес­ли по­лу­че­ный объ­ект дол­жен быть сохранен, необ­хо­ди­мо ли­бо стать его вла­дель­цем (пе­ре­дав со­об­ще­ние retain), ли­бо создать его копию (сохранив зна­че­ние, ко­то­рое воз­вра­ща­ет об­ра­бот­ка со­об­ще­ния, со­дер­жа­ще­го в на­зва­нии "copy").

Дан­ные правила базируются на со­гла­ше­нии по име­но­ва­нию в Objective-C и, в то же вре­мя, са­ми являются ос­но­вой это­го со­гла­ше­ния.

h2. XCode

Далее хотелось бы не много рассказать про основную IDE "Xcode":http://en.wikipedia.org/wiki/Xcode для программирование на продуктах Apple, под них же.
<a href="http://upload.wikimedia.org/wikipedia/en/2/2d/Xcode_3.2_project_window.png" title="View 'Xcode_3.2_project_window' on Flickr.com"><img alt="Xcode_3.2_project_window" border="0" height="414" src="http://upload.wikimedia.org/wikipedia/en/2/2d/Xcode_3.2_project_window.png" style="display: block; margin-left: auto; margin-right: auto;" width="500" /></a>
Xcode это IDE в полном смысле этого слова, в нем есть полноценный редактор кода, есть прозрачная интеграция между компилятором/дебагером/эмулятором и редактором кода по одному клику мыши, есть средства рефакторинга, интеграции с VCS и т.д. Но всегда есть "но". В XСode нету такого большого минуса, но есть много маленьких (тормозной рефакторинг, глюченная интеграция дебагера и редактора кода, редактор кода часто глючит, отсутствие интеграции с DVCS вернее со всеми VCS кроме SVN и CVS, etc).
Об XСode я думаю больше нечего рассказать (ниже еще покажу как установить иконку для проекта), в википедии достаточно информации.

h2. "iPad" SDK

Для iPad небыло отдельного SDK со своим именем, он просто получил новую версию iPhone OS, а именно 3.2, тем самым Apple сохранила бинарную совместимость между iPhone приложениями и iPad. Но "iPhone OS 3.2 получила несколько изменений":http://developer.apple.com/iphone/library/releasenotes/General/iPhone32APIDiffs/ в API:

# CoreText - новый богатый фреймворк для работы с текстом (шрифтами, размером, etc);
# Split View Controller - новый контролер который позволяет разделить данные, которые в iPhone разделялись переходом на новый экран. Теперь мы можем создавать приложения, которые доносят до пользователя максимум информации. Стандартный пример использования этого контролера, это таблица возможного выбора и отображение информации соответствующей колонки;
# "UIGestureRecognizer":http://developer.apple.com/iphone/library/documentation/General/Conceptual/iPadProgrammingGuide/GestureSupport/GestureSupport.html - новый API для управлением жестами, очень удобен и прост. Включает в себя несколько жестов: "Tapping (any number of taps)":http://developer.apple.com/iphone/library/documentation/UIKit/Reference/UITapGestureRecognizer_Class/Reference/Reference.html#//apple_ref/occ/cl/UITapGestureRecognizer, "Pinching in and out (for zooming a view)":http://developer.apple.com/iphone/library/documentation/UIKit/Reference/UIPinchGestureRecognizer_Class/Reference/Reference.html#//apple_ref/occ/cl/UIPinchGestureRecognizer, "Panning or dragging":http://developer.apple.com/iphone/library/documentation/UIKit/Reference/UIPanGestureRecognizer_Class/Reference/Reference.html#//apple_ref/occ/cl/UIPanGestureRecognizer,  "Swiping (in any direction)":http://developer.apple.com/iphone/library/documentation/UIKit/Reference/UISwipeGestureRecognizer_Class/Reference/Reference.html#//apple_ref/occ/cl/UISwipeGestureRecognizer, "Rotating (fingers moving in opposite directions)":http://developer.apple.com/iphone/library/documentation/UIKit/Reference/UIRotateGestureRecognizer_Class/Reference/Reference.html#//apple_ref/occ/cl/UIRotationGestureRecognizer, "Long press (also known as touch and hold)":http://developer.apple.com/iphone/library/documentation/UIKit/Reference/UILongPressGestureRecognizer_Class/Reference/Reference.html#//apple_ref/occ/cl/UILongPressGestureRecognizer.
# Popovers и Modal Dialogs - это еще один новый способ представления информации, тесно связанный с UISplitViewController'ом;
# Custom Keyboards - теперь нам дали возможность создавать собственные варианты клавиатуры;
# File and Document Support - теперь вы можете распространять и генерировать различные документы в своих программах;
# "Movie Player":http://developer.apple.com/iphone/library/documentation/MediaPlayer/Reference/MediaPlayer_Framework/MediaPlayer_Framework.pdf - расширили функционал проигрывателя, добавили контролер и много разных фич.

h2. Распространение

Во время и после написания продукта, возникает необходимость как распространять, так и тестировать продукт на реальном устройстве. Apple нам за $99 в год предлагает несколько способов решение данной задачи:

# Прямое тестирование при разработке. Вы подписываете свой девайс для разработке и продукт при сборке добавив профайл в сборку в Xcode, заливаете на устройство профайл и у вас появляется возможность дебажить/профилировать/устанавливать свой продукт на ваш девайс;
# Распространение на ограниченное число устройств. В год вы можете добавить 100 устройств (удаление устройства не увеличивает счетчик) к вашей подписке, на которых вы можете как тестировать, так и распространять свой продукт. Вы так же создаете профайл и добавляете его к проекту в Xcode. Так же создав Entitlements.info файл.
<a href="http://www.flickr.com/photos/49964984@N03/4624826278" title="View 'Screen shot 2010-05-20 at 21.12.23' on Flickr.com"><img alt="Screen shot 2010-05-20 at 21.12.23" border="0" height="181" src="http://farm5.static.flickr.com/4022/4624826278_221af184e5.jpg" style="display: block; margin-left: auto; margin-right: auto;" width="500" /></a>
Собрав с нужным профайлом, вы можете без проблем отсылать подписанным девайсам свой *.app архив, который легко устанавливается простым перетаскиванием в iTunes;

# И последний (и самый экстремальный :) ) тестировать на своих пользователях, т.е. оправлять приложение в AppStore. Вы создаете такой же профайл как и для ограниченного распространения, только указываете что будете отсылать в AppStore.

h2. Hints

Несколько маленьких, но полезных (по моему мнению) советов:
# Добавление матовой иконки в приложение
<a href="http://www.flickr.com/photos/49964984@N03/4624080647" title="View 'Xcode1' on Flickr.com"><img alt="Xcode1" border="0" height="404" src="http://farm5.static.flickr.com/4009/4624080647_32ca7efd37.jpg" style="display: block; margin-left: auto; margin-right: auto;" width="500" /></a>
# Что бы добавить какой либо проект поверх нескольких UIViewController, не обходимо добавлять его в UIWindow, который настраивается в AppDelegate. В последствие вам будет необходимо самому разбираться с ориентацией экрана для этих объектов, самому убирать/добавлять хендлеры событий в каждом контролере (в котором контрол используется), но зато вам удастся построить не обычный интерфейс на достаточно большом экране iPad'a в отличии от iPhon'a