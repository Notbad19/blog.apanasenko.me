---
layout: post
title: NoSQL
excerpt: <b>NoSQL</b> - новый тренд в IT технологиях, подносящиеся как спасительный круг и избавитель от всех насущных проблем. В основе данного направление лежит отказ от языка SQL и от реалиционных баз данных, как частности. Беспрецедентные объемы данных заставили бизнес взглянуть на альтернативы традиционной технологии реляционных баз данных, которые служили нам добрую службу более тридцати лет. В совокупности эти альтернативы стали известны как <b>NoSQL</b> базы данных.
published: true
categories:
- db
- nosql
---

<div style="text-align: center;">
<img alt="NoSQL" border="0" height="160" src="http://lh6.ggpht.com/_wN3Yn5K_LYs/SxvK3DAKbdI/AAAAAAAAAEc/83Uitfm8kRY/1.png?imgmax=750" width="750" /></div>

<b>NoSQL</b> - новый тренд в IT технологиях, подносящиеся как спасительный круг и избавитель от всех насущных проблем. В основе данного направление лежит отказ от языка SQL и от реалиционных баз данных, как частности. Беспрецедентные объемы данных заставили бизнес взглянуть на альтернативы традиционной технологии реляционных баз данных, которые служили нам добрую службу более тридцати лет. В совокупности эти альтернативы стали известны как "<b>NoSQL</b> базы данных". Что же плохого в SQL и реалиционных базах данных? Как говорят "проповедники" нового учения, это:

# Строгая схема данных
# Плохая масштабируемость
# Низкая производительность

Это не полный список "недостатков", но он отражает направленность <b>NoSQL</b> движения и основополагающие концепции. 
Основной проблемой является то, что реляционные базы данных не могут справиться со многими современными нагрузками. Из этого можно выделить три конкретные проблемные области: масштабируемость данных (<a href="http://blog.digg.com/?p=966">Digg's 3 ТБ</a>, <a href="http://www.cs.cornell.edu/projects/ladis2009/papers/lakshman-ladis2009.pdf">Facebook's 50 ТБ</a>, <a href="http://qconsf.com/sf2009/file?path=/QConSF2007/slides/public/RandyShoup_eBayArchPrinciples.pdf">eBay's 2 PB</a>), производительность сервера СУБД, строгая схема данных.

Термин <b>NoSQL</b> был придуман на самом деле <a href="http://blog.sym-link.com/2009/10/30/nosql_whats_in_a_name.html">Эриком Эвансом</a>, когда Johan Oskarsson из Last.fm хотел организовать мероприятие для обсуждения распределенных баз данных с открытым исходным кодом.

Для лучшей ясности нужно рассмотреть все эти проблемы с болле детальной стороны.

<b>Масштабирование</b> чтения данных легко организовать с помощью репликаций(мастер-слейв), так что когда мы говорим о масштабировании, нужно иметь в виду масштабирование записи данных(автоматическое разделение данных между несколькими машинами). Есть несколько ярких примеров распределенных баз данных - это <a href="http://incubator.apache.org/cassandra/">Cassandra</a>, <a href="http://hadoop.apache.org/hbase/">HBase</a>, <a href="http://riak.basho.com/">Riak</a>, <a href="http://code.google.com/p/scalaris/">Scalaris</a>, <a href="http://project-voldemort.com/"> Voldemort</a> и многое другие.

Есть две вещи, которые  имеют наибольшую важность распределенной базе данных:

# поддержка нескольких нод обработки данных
# возможность добавлять новые машины к кластеру(без остановки приложения) прозрачно для ваших приложений.

<div style="text-align: center;"><img alt="Базы данных" border="0" src="http://lh5.ggpht.com/_wN3Yn5K_LYs/SxwYMrsyaEI/AAAAAAAAAEk/tnf68FINxGw/NoSQL_1_New.png?imgmax=750" width="750" /></div>
Нераспределеными базами данными пока являются <a href="http://couchdb.apache.org/">CouchDB</a> (существует отдельный проект Lounge, для создания рапределенности), <a href="http://www.mongodb.org/display/DOCS/Home">MongoDB</a> (имееться ограниченная поддержка шардинга), <a href="http://neo4j.org/">Neo4j</a>, <a href="http://code.google.com/p/redis/">Redis</a> и <a href="http://1978th.net/tokyocabinet/">Tokyo Cabinet</a> (может быть использовать в качестве механизма хранения Voldemort).

Существует огромное многообразие <b>моделей данных и запросов API</b> в NoSQL баз данных.
<div style="text-align: center;"><img alt="API запросов и модели данных" border="0" src="http://lh3.ggpht.com/_wN3Yn5K_LYs/SxwbX6nDyLI/AAAAAAAAAEo/Fd5QY6wP-hU/NoSQL_2_New.png?imgmax=750" width="750" /></div>
<b>Cassandra</b> и <b>HBase</b> вдохновившись <a href="http://labs.google.com/papers/bigtable-osdi06.pdf">описанием BigTable</a> компании Google использовали Columnfamily модель в своией основе. В обеих системах, у вас есть строки и столбцы, как вы привыкли видеть.

Модель <b>Key/Value</b> является наиболее простой в реализации, но неэффективной, когда вы заинтересованы только в запросах или обновлении части значений. Также трудно осуществить более сложные структуры поверх распределенной схемы Key/Value.

<b>Документно-ориентированные</b> базы данных по существу являются следующим уровенем Key/Value модели, позволяя связывать более сложные структуры с ключом. 

<b>Neo4J</b> обладает поистине уникальной моделью данных, хранения объектов и отношений в качестве узлов и ребер графа. Запросы, которые соответствуют этой модели могут быть <a href="http://www.slideshare.net/emileifrem/neo4j-the-benefits-of-graph-databases-oscon-2009">в 1000s раз быстрее</a>, чем альтернативы.

<b>Scalaris</b> уникальна в предложенной системе распределенных транзакций между несколькими ключами. 

Как же эти базы данных сохраняют данные внутри себя?
<div style="text-align: center;"><img alt="Хранения данных" border="0" src="http://lh3.ggpht.com/_wN3Yn5K_LYs/SxwggBnqfZI/AAAAAAAAAEs/bCwbrcPIxa8/NoSQL_3.png?imgmax=750" width="750" /></div>
<b>In-memory</b> базы данных очень быстрые (<a href="http://code.google.com/p/redis/wiki/Benchmarks">Redis достигает более 100000 операций в секунду на одной машине</a>), но не могут работать с объёмом данных, который превышает объём оперативной памяти. Персистентное хранение также проблема для данных баз данных. 

<b>Memtables/SSTables</b> записывают всю информацию в буфер памяти ("memtable"), после чего добавляет коммит в durability лог. Когда достаточно информации было записано, memtable сортируется и записывается на диск в качестве "sstable." 

<b>B-tree</b> использовались в базах данных практически с самых первых реализаций. Они обеспечивают надежную поддержку индексирования, но с очень маленькой производительностью на жестких дисках(которые по-прежнему наиболее экономически выгодны) из-за многочисленных чтений или записей.

Интересным вариантом является CouchDB, которая использует B-tree только на добавление данных, что позволяет избежать накладных расходов на обновление данных.

Оригинал: <a href="http://www.rackspacecloud.com/blog/2009/11/09/nosql-ecosystem/">NoSQL Ecosystem</a>